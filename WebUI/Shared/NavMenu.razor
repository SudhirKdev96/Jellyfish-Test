@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime

<style type="text/css">
    a.nav-link {
        white-space: nowrap;
    }
</style>

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href=""></a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">

        @foreach (var m in menus)
        {
            var menu = m;
            <AuthorizeView Roles="@menu.Roles">
                <!-- Menu toggle -->
                <li class="nav-item px-2">
                    <NavLink class="nav-link" style="cursor: pointer;"
                         @onclick='x => ToggleMenu(menu)'>
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @menu.Title
                    </NavLink>
                </li>
                @if (menu.Expand)
                {
                    <!-- Collapsible sub-menu items -->
                    foreach (var link in menu.MenuLinks)
                    {
                        <li class="nav-item px-4">
                            <NavLink class="nav-link" @onclick="()=>OnNavClick(link.Item2)" href="javascript: void(0);">
                                <span class="@link.Item3" aria-hidden="true"></span> @link.Item1
                            </NavLink>
                        </li>
                    }
                }
            </AuthorizeView>
        }

    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private List<CollapsibleMenu> menus;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        var reportsMenu = new CollapsibleMenu("Reports", "SuperAdmin, Admin, User");
        reportsMenu.MenuLinks = new List<Tuple<string, string, string>>()
        {
            Tuple.Create("Projects Report", "report/clientproject", "oi oi-bar-chart")
        };

        var adminMenu = new CollapsibleMenu("Admin Only Management", "SuperAdmin, Admin");
        adminMenu.MenuLinks = new List<Tuple<string, string, string>>()
        {
            Tuple.Create("Projects", "list/project", "oi oi-list"),
            Tuple.Create("Clients", "list/client", "oi oi-list"),
            Tuple.Create("Company Profile", $"company/profile/{null}", "oi oi-list")
        };

        //var mgmtMenu = new CollapsibleMenu("Other Management", "SuperAdmin, Admin, User");
        //mgmtMenu.MenuLinks = new List<Tuple<string, string, string>>()
        //{
        //    Tuple.Create("Other [Example]", "list/other", "oi oi-document")
        //};

        // Add menus in display order
        menus = new List<CollapsibleMenu>();
        menus.Add(reportsMenu);
        menus.Add(adminMenu);
        //menus.Add(mgmtMenu);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleMenu(CollapsibleMenu menu)
    {
        menu.Expand = !menu.Expand;
        if (menu.Expand)
        {
            var menusToCollapse = menus.Where(x => x != menu).ToList();
            foreach (var m in menusToCollapse)
            {
                m.Expand = false;
            }
        }
    }

    public async Task OnNavClick(string url)
    {
        var hasUnsavedChanges = await jsRuntime.InvokeAsync<bool>("HasUnsavedChanges");
        if (hasUnsavedChanges)
        {
            var wantToLeave = await jsRuntime.InvokeAsync<bool>("ShowUnsavedAlert");
            if (wantToLeave)
            {
                _navigationManager.NavigateTo(url);
            }
        }
        else
        {
            _navigationManager.NavigateTo(url);
        }
    }

    public class CollapsibleMenu
    {
        public string Title { get; set; }
        public string Roles { get; set; }
        public bool Expand { get; set; }
        public List<Tuple<string, string, string>> MenuLinks { get; set; }
        public CollapsibleMenu(string title, string roles) { Title = title; Roles = roles; }
    }
}
