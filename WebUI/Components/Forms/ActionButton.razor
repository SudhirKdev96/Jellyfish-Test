@using System.Text

@* Provides a convenient button component for one of a predefined set of actions to reduce repeat markup all over the place*@

<button type="@GetButtonType()"
        data-toggle="tooltip"
        data-placement="top"
        class="@GetCssClass()"
        title="@GetTitle()"
        @onclick="@OnClick"
        @onclick:stopPropagation="@StopPropagationOnClick"
        disabled="@Disabled">
        
    <i class="@GetIconClass()"><span>@GetButtonText()</span></i>

</button>

@code {
    /// <summary>
    /// What kind of action this button performs. Known values that will preset icon/color/text are currently:
    /// add, edit, delete, restore, save, confirm, cancel. Not case-sensitive. Optional.
    /// If a custom value is provided, it will be used for the tooltip text.
    /// </summary>
    [Parameter]
    public string Action
    {
        get => _action;
        set
        {
            if (value == _action) return;

            SetAction(value);
            _action = value;
        }
    }

    /// <summary>
    /// Should this button show text on it? Defaults to no (icon-only).
    /// Ignored if ButtonText is explicitly set.
    /// </summary>
    [Parameter]
    public bool IsTextButton { get; set; }

    /// <summary>
    /// Should this button minimize the padding around its contents to take up less space?
    /// Defaults to yes.
    /// </summary>
    [Parameter]
    public bool MinimizePadding { get; set; } = true;

    /// <summary>
    /// Should this button use the bootstrap "outlined" look instead of filled-in color?
    /// Defaults to no.
    /// </summary>
    [Parameter]
    public bool IsOutlined { get; set; }

    /// <summary>
    /// What to do when this button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    /// <summary>
    /// Prevent click handling from bubbling up after doing the action defined here. Defaults to true.
    /// </summary>
    [Parameter]
    public bool StopPropagationOnClick { get; set; } = true;

    /// <summary>
    /// Explicit text to append to the action to show on the button's label. For example, if this is set to "Client,"
    /// and it's an "add" action, then the button label would read "Add Client." If this value is provided, then the
    /// button label will be shown regardless of the value of IsTextButton.
    /// </summary>
    [Parameter]
    public string ButtonText { get; set; }

    /// <summary>
    /// Additional css class(es) to apply to this button's markup
    /// </summary>
    [Parameter]
    public string CssClass { get; set; }

    /// <summary>
    /// Is this button disabled?
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Optionally specify the "type" attribute of the underlying button element.
    /// Defaults to "submit" if Action is save, or "button" otherwise
    /// </summary>
    [Parameter]
    public string ButtonType { get; set; }

    /// <summary>
    /// Optionally specify the bootstrap css type (primary, success, etc)
    /// </summary>
    [Parameter]
    public string CssType { get; set; }

    /// <summary>
    /// Optionally specify the fontawesome icon name to be shown on the button
    /// </summary>
    [Parameter]
    public string IconName { get; set; }


    #region private fields
    private string _action;
    private string _type = "button";
    private string _cssType = "secondary";
    private string _title;
    private string _iconName;
    #endregion

    protected void SetAction(string action)
    {
        // set fields based on the given action type
        switch (action?.ToUpper())
        {
            case "ADD":
                _cssType = "success";
                _title = "Add";
                _iconName = "fa-plus";
                break;

            case "EDIT":
                _cssType = "primary";
                _title = "Edit";
                _iconName = "fa-edit";
                break;

            case "DELETE":
                _cssType = "danger";
                _title = "Delete";
                _iconName = "fa-trash";
                break;

            case "RESTORE":
                _cssType = "warning";
                _title = "Restore";
                _iconName = "fa-trash-restore";
                break;

            case "SAVE":
                _cssType = "primary";
                _title = "Save";
                _iconName = "fa-save";
                _type = "submit";
                break;

            case "CONFIRM":
                _cssType = "primary";
                _title = "OK";
                _iconName = "fa-thumbs-up";
                break;

            case "CANCEL":
                _cssType = "secondary";
                _title = "Cancel";
                _iconName = "fa-times";
                break;

            case null:
                _cssType = "secondary";
                break;

            default:
                _cssType = "secondary";
                _title = action.ToTitleCase();
                break;
        }
    }

    // build the full css class string to set on the button
    private string GetCssClass()
    {
        var sb = new StringBuilder("btn btn-sm rounded-sm");

        sb.Append(" btn-");
        if (IsOutlined)
        {
            sb.Append("outline-");
        }
        sb.Append(CssType ?? _cssType);

        if (MinimizePadding)
        {
            sb.Append(" py-0 px-1");
        }

        if (CssClass != null)
        {
            sb.Append($" {CssClass}");
        }

        return sb.ToString();
    }

    // get the title (tooltip) when the button is hovered
    private string GetTitle()
    {
        return ButtonText == null ? _title : $"{_title} {ButtonText}";
    }

    // get the text to show on the button itself
    private string GetButtonText()
    {
        return (IsTextButton || ButtonText != null) ? $" {GetTitle()}" : null;
    }

    private string GetButtonType()
    {
        return ButtonType ?? _type;
    }

    private string GetIconClass()
    {
        return $"fa {IconName ?? _iconName}";
    }
}