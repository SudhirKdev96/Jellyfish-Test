@using BlazorTable
@using WebUI.Components.Forms

@* Encapsulates an Action Button in a predefined column for easy use in BlazorTables*@

@typeparam TableItem

@inherits Column<TableItem>

@code {
    private string _action;

    /// <summary>
    /// The type of action the button should perform. See ActionButton.razor for possible values
    /// </summary>
    [Parameter]
    public string Action
    {
        get => _action;
        set
        {
            if (value == _action) return;

            _action = value;
            Table?.Refresh();
        }
    }

    /// <summary>
    /// Explicit text to append to the action to show on the button's label. For example, if this is set to "Client,"
    /// and it's an "add" action, then the button label would read "Add Client." If this value is provided, then the
    /// button label will be shown regardless of the value of IsTextButton.
    /// </summary>
    [Parameter]
    public string ButtonText { get; set; }

    /// <summary>
    /// Something to do when the button gets clicked
    /// </summary>
    [Parameter]
    public EventCallback<TableItem> OnClick { get; set; }

    /// <summary>
    /// Prevent click handling from bubbling up after doing the action defined here. Defaults to true.
    /// </summary>
    [Parameter]
    public bool StopPropagationOnClick { get; set; } = true;

    /// <summary>
    /// Should the button minimize the padding around its contents to take up less space?
    /// Defaults to yes.
    /// </summary>
    [Parameter]
    public bool MinimizePadding { get; set; } = true;

    /// <summary>
    /// Should the button use the bootstrap "outlined" look instead of filled-in color?
    /// Defaults to no.
    /// </summary>
    [Parameter]
    public bool IsOutlined { get; set; }

    /// <summary>
    /// Additional css class(es) to apply to this button's markup
    /// </summary>
    [Parameter]
    public string CssClass { get; set; }

    /// <summary>
    /// Optionally specify the "type" attribute of the underlying button element.
    /// Defaults to "submit" if Action is save, or "button" otherwise
    /// </summary>
    [Parameter]
    public string ButtonType { get; set; }

    /// <summary>
    /// Optionally specify the bootstrap css type of the button (primary, success, etc)
    /// </summary>
    [Parameter]
    public string CssType { get; set; }

    /// <summary>
    /// Optional function to determine if the button should be hidden
    /// </summary>
    [Parameter]
    public Func<TableItem, bool> DoHide { get; set; } = x => false;


    protected override void OnInitialized()
    {
        // predefine some attributes of the base Column class
        Title = "";
        Width = "3%";
        Class = "text-center";

        // This black magic is defining the markup for the RenderFragment of the base Column class that you'd usually
        // see in <Template> tags in a razor file. We want to do this here so that the base class renders everything about the enclosing column,
        // and all we need to do is override how the cell contents are built.
        Template = item => __builder =>
        {
            @if (!DoHide(item))
            {
                <ActionButton Action="@Action" 
                              ButtonText="@ButtonText"
                              OnClick="e => OnClick.InvokeAsync(item)" 
                              StopPropagationOnClick="@StopPropagationOnClick" 
                              MinimizePadding="@MinimizePadding"
                              IsOutlined="@IsOutlined"
                              CssClass="@CssClass"
                              ButtonType="@ButtonType"
                              CssType="@CssType" />
            }
        };

        base.OnInitialized();
    }
}
